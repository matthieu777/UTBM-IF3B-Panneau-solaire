#include <Adafruit_NeoPixel.h>
#include <WiFi.h> // Cette bibliothèque permet à l'ESP32 de se connecter au réseau WiFi.
#include <PubSubClient.h> // Cette bibliothèque vous permet d'envoyer et de recevoir des messages MQTT.
#include <String.h>
#include <Wire.h>
#include <BH1750.h>

BH1750 lightMeter;

// definition des pin d'entree et de sortie

#define photo_PIN_o 35
#define photo_PIN_j 33
#define photo_PIN_v 34
#define photo_PIN_m 32
#define BUZZZER_PIN 4
#define NeoPixel_PIN 15
#define PRESS_PIN 19
#define Button_PIN 18

#define in1_m1 27 // sur l'axe Z
#define in2_m1 14
#define in3_m1 12
#define in4_m1 13

#define in1_m2 23 // en 3D
#define in2_m2 26
#define in3_m2 5
#define in4_m2 2

// Réseau WiFi auquel vous voulez vous connecter.
const char* ssid = "Bbox-D58C5632";
const char* password = "iUx1tk9LR35Y9kF3PQ";

// Ce champ contient l'adresse IP ou le nom d'hôte du serveur MQTT.
const char* mqtt_server = "mqtt.ci-ciad.utbm.fr";


WiFiClient espClient; // Initialiser la bibliothèque client wifi (connexion WiFi)
PubSubClient clientPlouz(espClient); // Créer un objet client MQTT (connexion MQTT) 
// Maintenant, notre client MQTT s'appelle "client". Nous devons maintenant créer une connexion à un broker.
long lastMsg = 0;
int dl = 30; // temps entre les pas, minimum 10 ms

Adafruit_NeoPixel led(8, NeoPixel_PIN, NEO_RGB + NEO_KHZ800);

void setup_wifi() {
  delay(10); // Cette instruction pause l'exécution du programme pendant 10 millisecondes.
  // We start by connecting to a WiFi network
  Serial.println(); // Imprime une ligne vide/saut de ligne dans la console série.
  Serial.print("Connecting to ");
  Serial.println(ssid); 

  WiFi.begin(ssid, password); // //démarre la connexion Wi-Fi avec les informations de connexion (SSID et mot de passe) fournies.

  //Cette boucle effectue une pause de 500 millisecondes jusqu'à ce que l'ESP32 soit 
  //connecté au réseau Wi-Fi. Le statut de la connexion est obtenu en appelant "WiFi.status()".
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

//-----La fonction callback est utilisée pour traiter les messages MQTT reçus par l'ESP32 et de prévoir une action.
//Elle est appelée chaque fois qu'un nouveau message est reçu sur un Topic auquel l'ESP32 est abonné.
void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic); // imprime le nom du Topic sur lequel le message a été publié.
  Serial.print(". Message: ");

  // Le message reçu est transmis à la fonction en tant que tableau de bytes "message" avec une longueur "length". 
  //Pour pouvoir travailler avec ce message dans le reste du code, nous devons d'abord le convertir en chaîne de caractères.
  String messageTemp; // déclare une variable de chaîne temporaire pour stocker le message reçu.

  // boucle sur chaque élement dans le tableau de bytes "message" et les ajoute à la chaîne "messageTemp".
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
          //Pour chaque itération, l'élément actuel du tableau de bytes "message" est converti en char avec "(char)message[i]" et affiché sur la console série avec "Serial.print((char)message[i])".
      //Ensuite, ce même élément est ajouté à la fin de la chaîne "messageTemp" avec
      //"messageTemp += (char)message[i];
  }
  Serial.println();

  if (String(topic) == "esp_josh/boutonReset") {
    if(messageTemp == "2"){
        Serial.print("\n\n nique ta mere josh \n\n");
        clientPlouz.publish("esp_josh/boutonReset", "0");
    }
  }

}

//La fonction "reconnect()" est utilisée pour garantir la connexion MQTT entre l'ESP32 et le broker MQTT. 
//Elle est appelée dans la boucle principale et elle se répète jusqu'à ce que la connexion soit établie avec succès.
void reconnect() {
  // Loop until we're reconnected
  while (!clientPlouz.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
	// Si la connexion est déjà établie, la fonction ne fait rien. 
	//Si la connexion n'est pas établie, le code essaie de se connecter à l'aide de "client.connect("espClient")".
   //Si la connexion est réussie, le code imprime "connected" sur la console série et s'abonne au topic "esp32/led" avec "client.subscribe("esp32/led")".
    if (clientPlouz.connect("espClient")) {
      Serial.println("connected");
      // Subscribe
      /*clientPlouz.subscribe("esp_josh/lux");
      clientPlouz.subscribe("esp_josh/val_j");
      clientPlouz.subscribe("esp_josh/val_o");
      clientPlouz.subscribe("esp_josh/val_m");
      clientPlouz.subscribe("esp_josh/val_v");
      clientPlouz.subscribe("esp_josh/position_m1");
      clientPlouz.subscribe("esp_josh/position_m2");
      clientPlouz.subscribe("esp_josh/bouton");
      clientPlouz.subscribe("esp_josh/pression");*/

      clientPlouz.subscribe("esp_josh/boutonReset");
    } 
	// Si la connexion échoue, le code imprime "failed, rc=" suivi de l'état de la connexion avec "client.state()" sur la console série 
   // La fonction se répète jusqu'à ce que la connexion soit établie avec succès.
	else {
      Serial.print("failed, rc=");
      Serial.print(clientPlouz.state());
      Serial.println(" try again in 5 seconds");
      // On attend 5 secondes avant de retenter la connexion
      delay(5000);
    }
  }
}

void step(int in1, int in2, int in3, int in4){
  //fonction pour faire un pas a un moteur

  digitalWrite(in1, HIGH); 
  digitalWrite(in2, LOW); 
  digitalWrite(in3, LOW); 
  digitalWrite(in4, HIGH);
  delay(dl);

  digitalWrite(in1, HIGH); 
  digitalWrite(in2, HIGH); 
  digitalWrite(in3, LOW); 
  digitalWrite(in4, LOW);
  delay(dl);

  digitalWrite(in1, LOW); 
  digitalWrite(in2, HIGH); 
  digitalWrite(in3, HIGH); 
  digitalWrite(in4, LOW);
  delay(dl);

  digitalWrite(in1, LOW); 
  digitalWrite(in2, LOW); 
  digitalWrite(in3, HIGH); 
  digitalWrite(in4, HIGH);
  delay(dl);

  digitalWrite(in3, LOW); 
  digitalWrite(in4, LOW);
}

void step_anti(int in1, int in2, int in3, int in4){
  //fonction pour faire un pas a un moteur dans l'autre sans
  digitalWrite(in1, LOW); 
  digitalWrite(in2, LOW); 
  digitalWrite(in3, HIGH); 
  digitalWrite(in4, HIGH);
  delay(dl);

  digitalWrite(in1, LOW); 
  digitalWrite(in2, HIGH); 
  digitalWrite(in3, HIGH); 
  digitalWrite(in4, LOW);
  delay(dl);

  digitalWrite(in1, HIGH); 
  digitalWrite(in2, HIGH); 
  digitalWrite(in3, LOW); 
  digitalWrite(in4, LOW);
  delay(dl);

  digitalWrite(in1, HIGH); 
  digitalWrite(in2, LOW); 
  digitalWrite(in3, LOW); 
  digitalWrite(in4, HIGH);
  delay(dl);

  digitalWrite(in4, LOW);
  digitalWrite(in1, LOW);
}

void setup() {
  Serial.begin(9600);
  pinMode(photo_PIN_j, INPUT);
  pinMode(photo_PIN_o, INPUT);
  pinMode(photo_PIN_v, INPUT);
  pinMode(photo_PIN_m, INPUT);
  pinMode(PRESS_PIN, INPUT);
  pinMode(Button_PIN, INPUT);

  pinMode(in1_m1, OUTPUT);
  pinMode(in2_m1, OUTPUT);
  pinMode(in3_m1, OUTPUT);
  pinMode(in4_m1, OUTPUT);
  pinMode(in1_m2, OUTPUT);
  pinMode(in2_m2, OUTPUT);
  pinMode(in3_m2, OUTPUT);
  pinMode(in4_m2, OUTPUT);

  setup_wifi(); // Cette ligne appelle la fonction setup_wifi() pour configurer la connexion Wi-Fi sur l'ESP32.
  clientPlouz.setServer(mqtt_server, 1883); //définit le serveur (broker) MQTT à utiliser pour la communication et le port de communication à 1883, qui est le port standard pour MQTT.
  clientPlouz.setCallback(callback); // définit la fonction callback comme la fonction à appeler lorsqu'un message MQTT est reçu.

  //tests leds
  led.begin();
  for(int i = 0; i<8; i++){
    led.setPixelColor(i, led.Color(10,0,0));
  }
  led.show();
  delay(1000);
  for(int i = 0; i<8; i++){
    led.setPixelColor(i, led.Color(0,10,0));
  }
  led.show();
  delay(1000);
  for(int i = 0; i<8; i++){
    led.setPixelColor(i, led.Color(0,0,10));
  }
  led.show();
  delay(1000);
  for(int i = 0; i<8; i++){
    led.setPixelColor(i, led.Color(0,0,0));
  }
  led.show();
  //test buzzer
  tone(BUZZZER_PIN, 440,1000);

  //test moteurs
  Serial.print("moteur 1 \n");
  for(int i = 0; i<4; i++){
    step_anti(in1_m1, in2_m1, in3_m1, in4_m1);
  }
  delay(1000);
  for(int i = 0; i<4; i++){
    step(in1_m1, in2_m1, in3_m1, in4_m1);
  }
  delay(1000);

  Serial.print("moteur 2 \n");
  for(int i = 0; i<4; i++){
    step_anti(in1_m2, in2_m2, in3_m2, in4_m2);
  }
  delay(1000);
  for(int i = 0; i<4; i++){
    step(in1_m2, in2_m2, in3_m2, in4_m2);
  }
  delay(1000);
  

}

void loop() {
  //test catpteurs
  int val_j = 0;
  int val_o = 0;
  int val_v = 0;
  int val_m = 0;
    Serial.print("\n orange : ");
  val_o = (int)(1.0 * analogRead(photo_PIN_o) * 4096.0/3860.0);
  Serial.print(val_o);
  Serial.print(" jaune : ");
  val_j = (int)(1.0 * analogRead(photo_PIN_j) * 4096.0/3950.0);
  Serial.print(val_j);
  Serial.print(" vert : ");
  val_v = (int)(1.0 * analogRead(photo_PIN_v) * 4096.0/4093.0);
  Serial.print(val_v);
  Serial.print(" marron : ");
  val_m = (int)(1.0 * analogRead(photo_PIN_m) * 4096.0/3770.0);
  Serial.print(val_m);
  Serial.print("   pression : ");
  Serial.print(digitalRead(PRESS_PIN));
  Serial.print(" Bouton : ");
  Serial.print(digitalRead(Button_PIN));

}
